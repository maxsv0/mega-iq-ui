import {Component, Input} from '@angular/core';
import {User} from '@/_models';

/**
 * @class ProfileComponent
 * @description User profile used for user home and user public profile
 */
@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.scss']
})
export class ProfileComponent {
  @Input()
  user: User;

  /**
   * @function getCertificateProgress
   * @description Returns width of progress bar with the value of the current certficate progress
   */
  getCertificateProgress() {
    const myProgress = this.user.certificateProgress;
    if (myProgress !== null) {
      return {
        'width': `${myProgress}%`
      };
    }
  }

  getPercentForPoints() {
    const percentMap = new Map([
      [160, 0.9996],
      [159, 0.9989],
      [158, 0.9981],
      [157, 0.9970],
      [156, 0.9957],
      [155, 0.9943],
      [154, 0.9933],
      [153, 0.9920],
      [152, 0.9901],
      [151, 0.9886],
      [150, 0.9864],
      [149, 0.9845],
      [148, 0.9821],
      [147, 0.9800],
      [146, 0.9770],
      [145, 0.9745],
      [144, 0.9709],
      [143, 0.9679],
      [142, 0.9639],
      [141, 0.9602],
      [140, 0.9555],
      [139, 0.9513],
      [138, 0.9461],
      [137, 0.9411],
      [136, 0.9358],
      [135, 0.9290],
      [134, 0.9235],
      [133, 0.9165],
      [132, 0.9094],
      [131, 0.9015],
      [130, 0.8936],
      [129, 0.8849],
      [128, 0.8761],
      [127, 0.8664],
      [126, 0.8579],
      [125, 0.8471],
      [124, 0.8362],
      [123, 0.8245],
      [122, 0.8134],
      [121, 0.8011],
      [120, 0.7884],
      [119, 0.7770],
      [118, 0.7635],
      [117, 0.7507],
      [116, 0.7370],
      [115, 0.7228],
      [114, 0.7078],
      [113, 0.6926],
      [112, 0.6769],
      [111, 0.6611],
      [110, 0.6431],
      [109, 0.6321],
      [108, 0.6151],
      [107, 0.5986],
      [106, 0.5808],
      [105, 0.5640],
      [104, 0.5462],
      [103, 0.5282],
      [102, 0.5113],
      [101, 0.4937],
      [100, 0.4754],
      [99, 0.4580],
      [98, 0.4401],
      [97, 0.4219],
      [96, 0.4041],
      [95, 0.3848],
      [94, 0.3662],
      [93, 0.3488],
      [92, 0.3300],
      [91, 0.3112],
      [90, 0.2919],
      [89, 0.2723],
      [88, 0.2539],
      [87, 0.2340],
      [86, 0.2150],
      [85, 0.1962],
      [84, 0.1791],
      [83, 0.1609],
      [82, 0.1437],
      [81, 0.1261],
      [80, 0.1096],
      [79, 0.0954],
      [78, 0.0808],
      [77, 0.0678],
      [76, 0.0563],
      [75, 0.0456],
      [74, 0.0361],
      [73, 0.0284],
      [72, 0.0215],
      [71, 0.0158],
      [70, 0.0114],
      [69, 0.0079],
      [68, 0.0052],
      [67, 0.0033],
      [66, 0.0019],
      [65, 0.0011],
      [64, 0.0006],
      [63, 0.0002],
      [62, 0.0000],
      [61, 0.0000]
    ]);

    const myIq = this.user.iq;
    if (myIq !== null) {
      return (percentMap.get(myIq) * 100).toFixed(2) + '%';
    }
  }
}
